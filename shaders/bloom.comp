// https://github.com/garlfin/garEnginePublic/blob/main/gESilk/resources/shader/bloom.shader

#version 460

#define BLOOM_MIP_COUNT 7

layout(local_size_x = 8, local_size_y = 4, local_size_z = 1) in;

layout(set = 0, binding = 0, rgba16f) restrict writeonly uniform image2D output_image[3 * BLOOM_MIP_COUNT + 1];
layout(set = 0, binding = 1) uniform sampler2D input_texture[4];
layout(set = 0, binding = 2) uniform sampler2D bloom_texture[4];

layout(set = 0, binding = 3) uniform parameters {
	vec4 params; // (x) threshold, (y) threshold - knee, (z) knee * 2, (w) 0.25 / knee
} bloom_param;

const float Epsilon = 1.0e-4;

layout (push_constant) uniform push_const {
	uint mode_lod_in_out_bloom;
} push;


#define MODE_PREFILTER 0
#define MODE_DOWNSAMPLE 1
#define MODE_UPSAMPLE_FIRST 2
#define MODE_UPSAMPLE 3
#define MODE_APPLY 4

// Quadratic color thresholding
// curve = (threshold - knee, knee * 2, 0.25 / knee)
vec4 QuadraticThreshold(vec4 color, float threshold, vec3 curve)
{
	// Maximum pixel brightness
	float brightness = max(max(color.r, color.g), color.b);
	// Quadratic curve
	float rq = clamp(brightness - curve.x, 0.0, curve.y);
	rq = (rq * rq) * curve.z;
	color *= max(rq, brightness - threshold) / max(brightness, Epsilon);
	return color;
}

vec4 Prefilter(vec4 color, vec2 uv)
{
	float clampValue = 20.0f;
	color = min(vec4(clampValue), color);
	color = QuadraticThreshold(color, bloom_param.params.x, bloom_param.params.yzw);
	return color;
}

vec3 DownsampleBox13(sampler2D tex, float lod, vec2 uv, vec2 texelSize)
{
	// Center
	vec3 A = textureLod(tex, uv, lod).rgb;

	texelSize *= 0.5f; // Sample from center of texels

	// Inner box
	vec3 B = textureLod(tex, uv + texelSize * vec2(-1.0f, -1.0f), lod).rgb;
	vec3 C = textureLod(tex, uv + texelSize * vec2(-1.0f, 1.0f), lod).rgb;
	vec3 D = textureLod(tex, uv + texelSize * vec2(1.0f, 1.0f), lod).rgb;
	vec3 E = textureLod(tex, uv + texelSize * vec2(1.0f, -1.0f), lod).rgb;

	// Outer box
	vec3 F = textureLod(tex, uv + texelSize * vec2(-2.0f, -2.0f), lod).rgb;
	vec3 G = textureLod(tex, uv + texelSize * vec2(-2.0f, 0.0f), lod).rgb;
	vec3 H = textureLod(tex, uv + texelSize * vec2(0.0f, 2.0f), lod).rgb;
	vec3 I = textureLod(tex, uv + texelSize * vec2(2.0f, 2.0f), lod).rgb;
	vec3 J = textureLod(tex, uv + texelSize * vec2(2.0f, 2.0f), lod).rgb;
	vec3 K = textureLod(tex, uv + texelSize * vec2(2.0f, 0.0f), lod).rgb;
	vec3 L = textureLod(tex, uv + texelSize * vec2(-2.0f, -2.0f), lod).rgb;
	vec3 M = textureLod(tex, uv + texelSize * vec2(0.0f, -2.0f), lod).rgb;

	// Weights
	vec3 result = vec3(0.0);
	// Inner box
	result += (B + C + D + E) * 0.5f;
	// Bottom-left box
	result += (F + G + A + M) * 0.125f;
	// Top-left box
	result += (G + H + I + A) * 0.125f;
	// Top-right box
	result += (A + I + J + K) * 0.125f;
	// Bottom-right box
	result += (M + A + K + L) * 0.125f;

	// 4 samples each
	result *= 0.25f;

	return result;
}

vec3 UpsampleTent9(sampler2D tex, float lod, vec2 uv, vec2 texelSize, float radius)
{
	vec4 offset = texelSize.xyxy * vec4(1.0f, 1.0f, -1.0f, 0.0f) * radius;

	// Center
	vec3 result = textureLod(tex, uv, lod).rgb * 4.0f;

	result += textureLod(tex, uv - offset.xy, lod).rgb;
	result += textureLod(tex, uv - offset.wy, lod).rgb * 2.0;
	result += textureLod(tex, uv - offset.zy, lod).rgb;

	result += textureLod(tex, uv + offset.zw, lod).rgb * 2.0;
	result += textureLod(tex, uv + offset.xw, lod).rgb * 2.0;

	result += textureLod(tex, uv + offset.zy, lod).rgb;
	result += textureLod(tex, uv + offset.wy, lod).rgb * 2.0;
	result += textureLod(tex, uv + offset.xy, lod).rgb;

	return result * (1.0f / 16.0f);
}

vec3 combine(vec3 existing_color, vec3 color_to_add, float combine_constant)
{
	existing_color += (-color_to_add);
	vec3 blended_color = (combine_constant * existing_color) + color_to_add;
	return blended_color;
}

// can be optimized into lut (compute can gen it)
float GTTonemap(float x) {
	float m = 0.22; // linear section start
	float a = 1.0;  // contrast
	float c = 1.33; // black brightness
	float P = 1.0;  // maximum brightness
	float l = 0.4;  // linear section length
	float l0 = ((P-m)*l) / a; // 0.312
	float S0 = m + l0; // 0.532
	float S1 = m + a * l0; // 0.532
	float C2 = (a*P) / (P - S1); // 2.13675213675
	float L = m + a * (x - m);
	float T = m * pow(x/m, c);
	float S = P - (P - S1) * exp(-C2*(x - S0)/P);
	float w0 = 1 - smoothstep(0.0, m, x);
	float w2 = (x < m+l)?0:1;
	float w1 = 1 - w0 - w2;
	return float(T * w0 + L * w1 + S * w2);
}

// this costs about 0.2-0.3ms more than aces, as-is
vec3 GTTonemap(vec3 x) {
	return vec3(
		GTTonemap(x.r),
		GTTonemap(x.g),
		GTTonemap(x.b)
	);
}

vec3 aces(vec3 x) {
	const float a = 2.51;
	const float b = 0.03;
	const float c = 2.43;
	const float d = 0.59;
	const float e = 0.14;
	return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);
}

void main()
{
	uint mode = push.mode_lod_in_out_bloom >> 28;
	uint lod = push.mode_lod_in_out_bloom >> 21 & 127;
	uint input_index = push.mode_lod_in_out_bloom >> 14 & 127;
	uint output_index = push.mode_lod_in_out_bloom >> 7 & 127;
	uint bloom_index = push.mode_lod_in_out_bloom & 127;

	vec2 imgSize = vec2(imageSize(output_image[output_index]));

	ivec2 invocID = ivec2(gl_GlobalInvocationID);
	if (invocID.x <= imgSize.x && invocID.x <= imgSize.x) {

		float combine_constant = 0.68;
		float intensity = 1.0;

		vec2 texCoords = vec2(float(invocID.x) / imgSize.x, float(invocID.y) / imgSize.y);
		texCoords += (1.0f / imgSize) * 0.5;

		vec2 texSize = vec2(textureSize(input_texture[input_index], int(lod)));
		vec4 color = vec4(1, 0, 1, 1);

		if (mode == MODE_PREFILTER)
		{
			color.rgb = DownsampleBox13(input_texture[input_index], lod, texCoords, 1.0 / texSize);
			color = Prefilter(color, texCoords);
			color.a = 1.0;
		}
		else if (mode == MODE_DOWNSAMPLE)
		{
			color.rgb = DownsampleBox13(input_texture[input_index], lod, texCoords, 1.0 / texSize);
		}
		else if (mode == MODE_UPSAMPLE_FIRST)
		{
			vec2 bloomTexSize = vec2(textureSize(input_texture[input_index], int(lod + 1)));
			float sampleScale = 1.0;
			vec3 upsampledTexture = UpsampleTent9(input_texture[input_index], lod + 1, texCoords, 1.0 / bloomTexSize, sampleScale);

			vec3 existing = textureLod(input_texture[input_index], texCoords, lod).rgb;
			color = vec4(combine(existing, upsampledTexture, combine_constant), 1.0);
		}
		else if (mode == MODE_UPSAMPLE)
		{
			vec2 bloomTexSize = vec2(textureSize(bloom_texture[bloom_index], int(lod + 1)));
			float sampleScale = 1.0;
			vec3 upsampledTexture = UpsampleTent9(bloom_texture[bloom_index], lod + 1, texCoords, 1.0 / bloomTexSize, sampleScale);

			vec3 existing = textureLod(input_texture[input_index], texCoords, lod).rgb;
			color = vec4(combine(existing, upsampledTexture, combine_constant), 1.0);
		}
		else if (mode == MODE_APPLY)
		{
			vec2 bloomTexSize = vec2(textureSize(bloom_texture[bloom_index], int(lod)));
			float sampleScale = 1.0f;
			vec3 upsampledTexture = UpsampleTent9(bloom_texture[bloom_index], lod, texCoords, 1.0f / bloomTexSize, sampleScale);

			vec3 existing = textureLod(input_texture[input_index], texCoords, 0).rgb;

			vec3 combined_color = combine(existing, upsampledTexture * intensity, combine_constant);
	
			vec3 mapped_color = GTTonemap(combined_color);

			vec3 gamma_corrected_color = pow(mapped_color, vec3(1.0 / 2.2));

			color = vec4(gamma_corrected_color, 1.0);
		}
		imageStore(output_image[output_index], invocID, color);
	}
}
